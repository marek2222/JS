----
Zadanie: napisz grę:  szubienica (wisielec)  
----
Na planszy do gry mam  zasłonięte hasło do odgadnięcia 
i wybieram jedną literkę. Jeśli trafię z literką hasła 
literka podświetla się na zielono i pokazuje na divie z hasłem.
Jeśli nie trafiłem kolor zmienia się na czerwony
i pokazuje się pierwszy i kolejne elementy szubienicy.
Jeżeli w ciągu gry odgadniemy hasło to wygraliśmy,
jeśli nie to zawiśliśmy na szubienicy.
Należy pokazać odpowedni komunikat dla każdego z wariantów.
Niezależnie od wyniku należy pokazać tekst do gry od początku.

Zadanie pozwala na zrozumienie jak przetwarzane są napisy, 
czyli tzw. łańcuchy (stringi).



----
Korzystamy z szablonu z plikami: szablon.
------------------------
------------------------
etap_1

----
Etapy pracy:

----
W szubienica.html mamy zewnętrzny plik: style.css 
i zewnętrzny plik js: szubienica.js.

	<title>Szubienica</title>
	<link rel="stylesheet" href="style.css" type="text/css" />
	<script src="szubienica.js"></script>

----
Struktura witryny:
- ramką główną jest div id="pojemnik". 
    A w nim mamy:
    - na samej górze umieść diva id="plansza" który będzie
        przechowywał hasło, które aktualnie odgadujesz.
    - pod spodem po lewej stronie umieść div id="szubienica"
        a w nim rysunek wisielca
    - pod spodem po prawej stronie umieść div id="alfabet"
        a w nim kolejne divy o nazwie litera z których każdy 
        będzie określał jedną z liter alfabetu. 
        Jeśli ta literka jest w haśle to zmień kollor literki na zielony,
        a jeśłi jej nie było zmień kolor na czerwony. 
        Literki już użyte nie powinny reagować na kliknięcie. 
        Jedynie białe powinny być klikalne.
    - Głowny  div id="pojemnik" wyśrodkuj przez:
        margin-left: auto; margin-right: auto; 

----
Ustaw ciemne tło w style.css w sekcji body: 

---
Dodaj div id="pojemnik". 
Ustaw szerokość diva na 900px i marginesy lewy i prawy na auto.


---
W div'ie id="pojemnik" umieść wszystkie pozostałe divy:
	- div id="plansza" 
		Ustaw szerokość diva na 900px i marginesy górny i dolny 
		(top i bottom) na 50px.
		Hasło w planszy ma być wyśrodkowane na ekranie i duże - 48px.

	- div id="szubienica"
		Ustaw szerokość diva na 450px i tekst ma być wyśrodkowany.

	- div id="alfabet"
		Ustaw szerokość diva na 450px i tekst ma być wyśrodkowany.

	- wyczyść floaty przez:
			<div style=clear:both"></div>

	
---
Dodaj do div id="szubienica" znacznik img z pierwszym obrazkiem  

------------------------
------------------------
Zobacz stronę w przeglądarce.


------------------------
------------------------
etap_2
---
Ustaw 
- wysokość div id="plansza" na 60px ;
- wysokość div'a szubienica na 280px
- wysokość div'a alfabet na 280px
	ponieważ wysokość obrazka jest właśnie taka. 
Te wysokości traktuj jako minimalne, 
oczywiście mogą być większe jeśli rozszerzysz obrazek.

Jeśli nie ustawisz minimalnej wysokości, 
a będziesz zmieniał/a obrazek przed wczytaniem kolejnego obrazka
to przez moment wysokość pustego diva wyniesie 0.
Minimalna wysokość zabezpiecza przed tym.


---
Przejdzmy na plik: szubienica.js:
	- wpisz zmienną haslo = "Bez pracy nie ma kołaczy";
	- dodaj funcję: pokaz_haslo() która wpisze hasło do diva plansza.
	- podepnij funkcję pod zdarzenie onload 
		a). przez window.onload = pokaz_haslo; lub 
		b). przez <body onload=""></body>  


---
---
Zobacz stronę w przeglądarce. 


------------------------
------------------------
etap_3

---
Hasło powinno być napisane wielkimi literami.
Powinno być zasłonięte ponieważ nie nacisneliśmy jeszcze 
żadnego przycisku, a w miejsca liter powinny być podkreśliniki "_".

---
Hasło wielkimi literami zrób w JS.
Spróbuj zasłonić hasło i je pokazać.

Plan 'wykreskowania' hasła i zapisania w zmiennej haslo1:
- Pętla for która wykona się tyle razy ile znaków jest w haśle
- w każdej iteracji pętli, do zmiennej haslo1 doklejamy 
	albo myślnik (gdy znajdziemy literę) albo spację w oryginalnym haśle.


!!!!!!!!!!!!!!!
Uwaga!!! Nie możemy przy łańcuchach używać notacji 
z nawiasami kwadratowymi []. Jest to baaaardzo niebezpieczne 
i działa nieprzewidywalnie. 
	  haslo1 = (haslo[i] == " ") ? haslo1 + " ": haslo1+ "-";  

Zamiast tego tak dostaniemy się do konkretnego znaku przez funkcję charAt():
		haslo.charAt(5)  -- czyli: znak przy danym numerze w łańcuchu

Inny sposób to konwersja łańcucha tdo tablicy funkcją: split()
Dlatego zamień wyrażenie na:
	  haslo1 = (haslo.charAt(i) == " ") ? haslo1 + " ": haslo1+ "-";  
		

---
Zobacz stronę w przeglądarce. 

---
Wszystko fajnie działa ale brakuje nam literek po prawej, 
które można by kliknąć i sprawdzić w tym zakreskowanym haśle.
Prygotuj więc skrypt js do wygenerowania zawartości diva alfabet.
Napisz funkcję np. start.
Jeśli ktoś kliknię literkę E to ta literka ma się podświetlić na zielono 
jeśli jest znajdzie się w haśle a na czerwono jeśli jej brak. 
Literka raz użyta ma być już do końca gry nieaktywna.


---
Zmień 
		window.onload = pokaz_haslo; na 
		window.onload = start;
a w funkcji start() na końcu dodaj wywołanie funkcji pokaz_haslo().


---
W funkcji start() 
	- dodaj zmienną tresc_diva - gdzie umieścisz alfabet
		czyli poszczególne 35 liter alfabetu.
	- wypełnij div alfabet zmienną tresc_diva.

	Zmienna tresc_diva ma posiadać 35 liter, 
	z których każda litera zamknij w ramce (borderze).
	Można to podzielić na 5 wierszy po 7 kolumn.
	Dodaj klasę opisującą każdą z tych liter o nazwie: litera. 

	Zacznij od zrobienia pętli która wykona się 35 razy.
	I w każdej iteracji dodamy jednego diva klasy .litera.
	W stylach dodaj klasę .litera, gdzie: 
		- wysokość i szerokść to 30px
		- jest wyśrodkowany text
		- padding: 5px
		- margines: 5
				czyli mamy 40 px na jedną literkę.
		- ramka(border) 3px solid grey; 
		- dosuń do lewej(float: left;)
  	- i dodaj łapkę po najechaniu

	W js w każdej iteracji pętli for dokładamy:
	    tresc_diva = tresc_diva + '<div class="litera">A</div>';     

---
Zobacz stronę w przeglądarce. 


---
Spróbuj zakrąglić rogi w obramowaniu i zobacz to w przeglądarce. 


---
Zawiń literki aby przedstawiały układ 7x5 w js.
Możesz użyć do tego celu modulo (%).


---
Teraz przypisz wszystkie literki alfabelu do kolejnych div'ów.
		- Utwórz tablicę (array) z literkami pod zmienną: litery.
				var litery = new Array(35);
			Należy wypełnić jaki jest rozmiar tablicy (35 znaków).
			litery[] to tablica przechowująca 35 łańcuchów;
			do tablicy możesz stosować notacje z nawiasami [].
		- Użyj tablicę: litery do wypełnienia div'ów.
					tresc_diva = tresc_diva + '<div class="litera">'+ litery[i]+'</div>';     


---
Pokaż podświetlenie wszystkich literek w CSS.
		.litera:hover
Uwaga: po dwukropku nie dawaj spacji bo przestanie działać.
		Ustaw:
		- czarny kolor tła;
		- bialy kolor tekstu;
		- ramka 3px ciągła biała;


---
Trzeba dodać reakcję na kliknięcie danej literki:
	czy istnieje ta literka w haśle: 
	- jeśli tak to pokaż wszystkie jej wystąpienia, 
	- jeśli nie to zostanie narysowany pierwszy element szubienicy.
Pamiętaj, że kliknięta litera ma zmienić kolor na zielony albo czerwony.
Należy także dezaktywować literkę, nie powinna być ona klikalna.

Więc czy należy użyć 35 funkcji do obsługi wszystkich przycisków?
Można stworzyć jedną funkcję, ale taką do której wyślemy numer diva 
jako argument: 
		sprawdz(nr)
Ale musisz wiedzieć którego div'a szukasz, który jest aktualny.
Żeby to zrobić należy nadać div'om identyfikatory: lit0, lit1  ... lit34


---
JS: Wewnątrz pętli przygotuj sobie nazwę div'a. 
    var element = 'lit'+i;
    tresc_diva = tresc_diva + '<div class="litera" id="'+ element +'">'+ litery[i]+'</div>';     


---
58:41
JS: Utwórz funkcję która będzie wywoływana w momencie kliknięcia na daną literę.
Napisz funkcję (na dole dokumentu, za funkcją start()): 
		sprawdz(nr)
		gdzie: nr - będzie argumentem, z przedziału od 0 do 34
Testuj tą funkcję wpisując do niej alert z argumentem: nr 
oznaczającym numer literki.
	  alert(nr);
Dodaj do div'a każdego z literek zdarzenie onclick z funkcją: sprawdz(nr)
    var element = 'lit'+i;
    tresc_diva = tresc_diva 
      + '<div class="litera" onclick="sprawdz('+i+')" id="'+ element +'">'+ litery[i]+'</div>';     



---
Zobacz stronę w przeglądarce. 
Przejdź na jakąś literkę i przez prawy przycisk myszy wybierz Inspect.
Zobacz jak wygląda kod wygenerowany przezz javascript.

Teraz usuń roboczego alerta z funkcji: sprawdz(nr)


------------------------
------------------------
etap_4  

---
Teraz w funkcji sprawdz(nr) wpisz kod, który sprawdzi czy w odgadywanym haśle 
znajduje się kliknięta przez nas literka. 
Przejdź do każdej litery hasła i sprawdź czy nie jest ona poszukiwaną
przez nas literką a jeśli tak to w zmiennej: haslo1 odsłoń 
każde jej wystąpienie.

R: Napisz pętlę for która wykona się tyle razy ile liter jest w haśle. 		
Sprawdź czy aktualnie rozpatrywany znak hasła jest równy znakowi 
o numerze: nr.
		for(var i=0; i<dlugosc; i++){
			if(haslo.charAt(i) == litery[nr]){
				alert(i);
			}
		}

---
Zobacz stronę w przeglądarce. 
Po kliku literki E otrzymasz numer 1 i 12.
Oznacza to że literka E znajduje się na pozycji 2 i 13 w haśle.
Zobacz jeszcze literkę B, a otrzymasz 0.


---
R: Napisz pętlę for która wykona się tyle razy ile liter jest w haśle. 		
Sprawdź czy aktualnie rozpatrywany znak hasła jest równy znakowi 
o numerze: nr.
  for(var i=0; i<dlugosc; i++){
    if(haslo.charAt(i) == litery[nr]){
      haslo1.charAt(i) = litery[nr];
    }
  }

---
Zobacz stronę w przeglądarce. 
Zobacz dlaczego nic się nie dzieje po kliknięciu w literkę. 
Zobacz czy Narzędziach developerskich na zakłądce Console nie ma błędów?
Przejdź do zakąłdki Sources i otwórz szubienica.js. Zobacz gdzie jest błąd?
O co chodzi?
	Funkcji charAt() możemy użyć po prawej stronie przypisania a nie po lewej.
	Ta funkcja zapewnia odczyt ale nie zapis.
Więc co zrobić? Jak ten znak podmienić na wybranej pozycji.


---
Napisz sam funkcję która będzie podmieniać nam znak 
na zadanej pozycji w łańcuchu. Napisz ją jako wbudowaną funkcję jak: 
		łąńcuch.funkcja();
		napis.toUpperCase();
		napiss.charAt(5);
Utwórz sam wbudowaną funkcję ustawZnak z parametrami (miejsce, znak):
R: zabezpiecz się przez zbyt dużą wartością w parametrze: miejsce.
Przykład: 
		var napis = "HASŁO";
		napis.ustawZnak(10,"A");
Mamy napis w którym mam 5 liter ale ustawZnak 
chce podmienić na 10 pozycji znak A. I mam problem.
Dlatego sprawdź czy miejsce jest większe od długości napisu (this.lenght)
a jeśli tak to zwróć ten właśnie łańcuch. 
Dla pewności zwracamy w formie stringa.
		if(miejsce > this.length - 1)			return this.toString();

Teraz jeśli ktoś podał poprawne miejsce to dodaj kod: 
  	else return this.substr(0,miejsce) + znak + this.substr(miejsce+1);

Skorzystałem z funkcji: substr = ang.substring
czyli to jest "podłańcuch" - wyjęty fragment tekstu
Funkcja istnieje w dwóch wariantach:
		napis.substr(x,y);	
		napis.substring(x,z);	

Wracając do naszego if'a:
    haslo1 = haslo1.ustawZnak(i, litery[nr]);

Na końcu funkcji wywołaj funkcję: 
	  pokaz_haslo();
aby pokazać aktualne hasło.



---
Zobacz stronę w przeglądarce. 
Niestety litery są szersze niż myślnk i dlatego jest dyskomfort.
JAk to zminimalizować?
Wystarczy użyć czcionki której znaki mają stałą szerokość.
Jest to czcionka monotypiczna(monospace).


---
W przeglądarce Przechodzimy do witryny: google font
Na liście Language wybieramy Latin Extended 
(szukamy tylko czcionek obsługujące polskie ogonki)
a na liście Categories zaznacz tylko rodzinę czcionek Monospace, 
a odznacz pozostałe.
Teraz mam zestawienie fontów w których wszystkie znaki mają stałą szerokość.
Wybierz czcionkę: Inconsolata
kliknij na: Select this font
Przejdź na zakładkę: Family selected i na zakładce CUSTOMIZE (dostosuj)
zaznacz dodatkowo: bold700 i Latin Extended.

Przejdź na zakładkę: EMBED. 
Skopiuj wygenerowany link do główki naszego dokumentu HTML. 
Skopiuj font-family do naszefo CSS's, do sekcji: body
	  font-family: 'Inconsolata';
i dodaj jeszcze bolda:
		font-weight: 700;


---
Zobacz jak teraz wygląda gra i prezentuje się odsłanianie pojedyńczych liter: 
W momencie odsłaniania liter hasło wcale nie przemieszcza się na ekranie.


------------------------
------------------------
etap_5  : 1:18:20



---
Teraz pozostaje nam dodać do sprawdzania znaków odpowiedznie kolorowanie
tych div'ów po kliknięciu. Tak żeby kliknięta literka stała się 
albo zielona albo czerwona - w zależności od tego czy została odnaleziona 
w haśle czy też nie. Czyli pozostaje nam podmienić odpowiednio styl 
klikniętego div'a, zawierającego sprawdzaną w haśle literkę. 
Można to zrobić za pomocą flagi:
		flaga - zmienna o wartoś ci true/false.

R: Ustaw flagę w funkcji sprawdz(nr) i ustaw kolor tła na zielony: 
		function sprawdz(nr) {
			var trafiona = false;   //nietrafiona literka

			for(var i=0; i<dlugosc; i++){
				if(haslo.charAt(i) == litery[nr]){
					haslo1 = haslo1.ustawZnak(i, litery[nr]);
					trafiona = true;
				}
			}
		  if (trafiona == true) {
				var element = 'lit' + nr;    
				document.getElementById(element).style.background = "#003300";
		    pokaz_haslo();  // pokazanie hasła
			}
			else  {

			}
		}

		- ustaw kolor tekstu na zielony
		- ustaw kolor obramowania na zielony
		- zmień wskażnik na domyślny - nie potrzebuję już łapki
		
				document.getElementById(element).style.color = "#00C000";
				document.getElementById(element).style.border = "3px solid #00C000";
				document.getElementById(element).style.cursor = "default";


---
Teraz literki których w haśle nie ma powinny się nam zapalić na czerwono.
Dodatkowo obrazek szubienicy należy podmienić na następny z kolei.
Z dorysowaną kolejną częścią szubienicy. 
R: Wystarczy dokodować else do tego if'a.
Skopiuj wszystkie 5 linii i zmień kolor na czerwony
    else  {
			var element = 'lit' + nr;    
			document.getElementById(element).style.background = "#330000";
			document.getElementById(element).style.color = "#C00000";
			document.getElementById(element).style.border = "3px solid #C00000";
			document.getElementById(element).style.cursor = "default";
		}
Sprawdź w przeglądarce:


---
Kolejną rzeczą jest dorysowanie szubienicy wtedy kiedy się pomyliliśmy. 
TAk naprawdę chodzi o zmianę obrazka z dorysowanymi kolejnymi ele-
mentami szubienicy. Masz 10 obrazków w katalogu img. 
Są tam obrazki od s0 do s9 i mają rozszerzenie jpg. 
W naszym kodzie obrazek siedzi w div'ie o id="szubienica".

R: Podmień wewnętrzny HTML tego div'a ale musimy wiedzieć ile 
skuch już nastąpiło, żeby załadować odpowiedni do stanu sytuacji obrazek.
JS: Na górze kodu dodaj zmienną globalną: ile_skuch = 0; 	
Na początku przypisz jej 0 bo zaczynamy od obrazka s0.jpg
i od sytuacji że błędu jeszcze nie było. 
    // skucha
    ile_skuch++; 

Zobacz że ilość skuch zasadniczo odpowiada nazwie pliku,
bo mamy s0, s1, s2 itd.
Zamień więc ten obrazek w div'ie szubienica. 
    var obraz = "img/s"+ ile_skuch + ".jpg";
    document.getElementById("szubienica").innerHTML = '<img src="'+obraz+'" alt="" />';

Sprawdź w przeglądarce:
Zobacz że dobrze działa ale jeszcze należy uchwycić moment 
że popełnisz tak dużo błedów że obrazek o kolejnym numerze już nie będzie  
istniał w folderze. Ostatnie nasz plik kótry jest dostępny to jest s9.jpg. 


---
Ale jeszcze jedna sprawa. Nieco groźniejszy bug:
zobacz że klikanie w tą samą błędną (nie występującą w haśle) literkę
powoduje że pojawiają się kolejne elementy szubienicy.
Trzeba po zmianie koloru na czerwony zawiesić działanie onclick'a 
tego div'a. Nie powinna nam się doliczać kolejna skucha.
Jak osiągnąć taki efekt neutralizacji?
R: Przez: setAttribute
    document.getElementById(element).setAttribute("onclick",";");

Sprawdź w przeglądarce:
Wszystko dobrze działa.


---
Pozostaje nam już tylko okodować sytuację w której przegrywamy popełniając
9 błedów albo wygrywamy rozgywkę odsłaniając całe hasło.
Napisz kod obejmujące część z wygraną, czyli wtedy gdy hasło zostało 
odsłonięte.
Po odgadnięciu całego hasła zamień div'a alfabet na gratulację.
Ustaw również reset przeglądarki po kliknięciu w span.  
R: 
		// wygrana
		if (haslo == haslo1) {
			document.getElementById("alfabet").innerHTML = 'Tak jest!!! Podano pawidłowe hasło: ' 
			+ haslo + '<br/><br/><span class="reset" onclick="location.reload()">JESZCZE RAZ?</span>' 
		}


Trzeba nam jeszcze wystylizować tego spana, bo będziemy mieli klasę o nazwie
'reset'. Na pewno warto dać napisowi: 'JESZCZE RAZ?' cursor: pointer; 
i jakiegoś hovera czyli efekt najechania.
R: 
		.reset	{
			color: green;
			cursor: pointer;
			font-size: 48px;
		}
		.reset:hover{
			color:white;
		}


---
Napisz kod obejmujące część z przegraną, czyli wtedy gdy popełniliśmy 
więcej niż 9 pomyłek.
R: 
		if (ile_skuch >= 9) {
			document.getElementById("alfabet").innerHTML = 
			'Przegrana!!! Pawidłowe hasło:<br />' 
			+ haslo + 
			'<br/><br/><span class="reset" onclick="location.reload()">JESZCZE RAZ?</span>' 
		}


---
Dodaj dzwięk przy kolorowaniu klikniętej literki na zielono
albo na czerwono.
R: Utwórz nowe dwie zmienne: 
		var tak = new Audio("yes.wav");
		var nie = new Audio("no.wav");

Gdy literka znajduje się haśle to odtwarzamy ją przez:
    tak.play();
a jeśli nie ma to:
    nie.play();


---
Gra jest zakończona.
Gratulacje!!!!


------------------------
------------------------
etap_6
---
Poprawienie kodu:



---
Dodatkowo:
- moduł losujący hasło spośród co najmniej kilkunastu możliwych.
	Można do tego wykorzystać funcję Math.Random() i tablice
- dzwięki przy zakończeniu całej gry, przy wygranej i przegranej
- skategoryzować hasła do odgadnięcia na np: przysłowia, film, książka. 



